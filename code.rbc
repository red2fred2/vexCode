#pragma platform(VEX2)
#pragma competitionControl(Competition)
#include "Vex_Competition_Includes.c"

//utility functions
int deadzone(int value) {
    const int deadzone = 10;
    if(value > deadzone) return value;
    else return 0;
}

void drive(int left, int right) {
  motor[leftDrive] = deadzone(left);
  motor[rightDrive] = deadzone(right);
}

void lift(int left, int right) {
  motor[leftLift] = deadzone(left);
  motor[rightLift] = deadzone(right);
}

void arm(int forward) {
  motor[armSlide] = deadzone(forward);
}

void baseLift(int left, int right) {
  motor[baseLiftLeft] = deadzone(left);
  motor[baseLiftRight] = deadzone(right);
}


//teleop functions
void joystickDrive() {
  int up = vexRT(Ch3)
  int right = vexRT(Ch4)
  drive(up + right, up - right);
}

void liftControl() {
  int left = vexRT(Ch3Xmtr2);
  int right = vexRT(Ch2Xmtr2);
  lift(left, right);
}

void armControl() {
  int forward = vexRT(Ch4Xmtr2);
}

void baseLiftControl() {
  int power = VexRT(Ch1Xmtr2);
  baseLift(power);
}


//auto functions


////////////////
void pre_auton() {

}

task autonomous() {

}

task usercontrol() {
  while(true) {
    //automatic

    //driver
    joystickDrive();

    //copilot
    liftControl();
    armControl();
    baseLiftControl();
  }
}
